version: '3.2'

services:
  app: &app
    build:
      context: ../
      cache_from:
        - $DOCKER_IMAGE_CACHE_BRANCH_VERSION # fetch $DOCKER_IMAGE_CACHE from env host, and uses as cache image, the image needs to be pulled first
        - josimarcamargo/ticketfy:latest
      dockerfile: monolith/docker/Dockerfile
      args:
        COMMAND: rails s -b 0.0.0.0
        RAILS_ENV: development
    tmpfs:
      - /tmp
    stdin_open: true
    tty: true
    volumes:
      - .:/root_app_folder/monolith
      - rails_cache:/root_app_folder/monolith/tmp/cache # share cache between containers for dev purposes and fix problems with permission when running with root user
      - ./docker/.env.development:/root_app_folder/monolith/.env.development
    environment:
      HISTFILE: /root_app_folder/monolith/log/.bash_history
      EDITOR: vi
      DATABASE_URL: postgres://postgres:postgres@postgres:5432 # update this line to set, another db address, aparentemente, para rodar comandos rake etc, esta linha se faz
      # necessária, aparentemente essas variaveis não ficam com no container, elas são passadas quando o container é iniciado, pelo menos foi
      # oque observei usando o comando
      #  docker-compose run app bash
      # vou testar com o build para ver se a variavel é persistida
    depends_on:
      - postgres
    ports:
      - '3000:3000'

  runner:
    <<: *app
    command: /bin/bash
    ports:
      - '3001:3000'

  tester:
    <<: *app
    build:
      context: ../
      dockerfile: monolith/docker/Dockerfile
      cache_from:
        - $DOCKER_IMAGE_CACHE_BRANCH_VERSION # fetch $DOCKER_IMAGE_CACHE from env host, and uses as cache image, the image needs to be pulled first
        - josimarcamargo/ticketfy:latest
      args:
        RAILS_ENV: test
        ENVIRONMENT_PACKAGES: libc6-compat chromium chromium-chromedriver
    environment:
      DOCKER_MODE: 'true'
      DATABASE_URL: postgres://postgres:postgres@postgres:5432
      HISTFILE: /root_app_folder/monolith/log/.bash_history
      EDITOR: vi
    command: /bin/bash
    ports:
      - '3002:3000'

  production:
    <<: *app
    image: ticketfy_production
    build:
      context: ../
      dockerfile: monolith/docker/Dockerfile
      cache_from:
        - $DOCKER_IMAGE_CACHE_BRANCH_VERSION # fetch $DOCKER_IMAGE_CACHE from env host, and uses as cache image, the image needs to be pulled first
        - josimarcamargo/ticketfy:latest
      args:
        RAILS_ENV: production
        COMMAND: rails s -b 0.0.0.0
        RAILS_MASTER_KEY: $RAILS_MASTER_KEY # fetch $RAILS_MASTER_KEY from env host
        RAILS_SERVE_STATIC_FILES: 'true'
    environment: # those environments variables are not persisted at the build image, this makes easy spin this container in dev, also works as docs
      DATABASE_URL: postgres://postgres:postgres@postgres:5432 # this makes easy spin this container in dev
      RAILS_MASTER_KEY: $RAILS_MASTER_KEY # this makes easy spin this container in dev
    ports:
      - '3000:3000'

  heroku_releaser:
    <<: *app
    image: ticketfy_heroku_releaser
    build:
      context: ../
      dockerfile: monolith/docker/Dockerfile
      cache_from:
        - $DOCKER_IMAGE_CACHE_BRANCH_VERSION # fetch $DOCKER_IMAGE_CACHE from env host, and uses as cache image, the image needs to be pulled first
        - josimarcamargo/ticketfy:latest
      args:
        RAILS_ENV: production
        RAILS_MASTER_KEY: $RAILS_MASTER_KEY # fetch $RAILS_MASTER_KEY from env host
        COMMAND: rake db:migrate

  postgres:
    container_name: postgres
    image: postgres:11.6-alpine
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD:
    healthcheck:
      test: pg_isready -U postgres -h 127.0.0.1
      interval: 5s
    ports:
      - ${POSTGRES_EXTERNAL_PORT:-5432}:5432 # allows change the external port, usefully when host already has the port used like: SemaphoreCI, to use just set POSTGRES_EXTERNAL_PORT as environment variable

volumes:
  postgres:
  rails_cache:
